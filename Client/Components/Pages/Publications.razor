@page "/user/publications"
@using Client.Extensions
@using Client.Models.Publication
@using Client.Services
@using Client.Services.Abstractions
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims

@inject IPublicationService publicationService
@inject NavigationManager nav
@inject ICookie Cookie

@rendermode @(new InteractiveServerRenderMode(prerender:false))

<div class="pages-layout">
	<div class="article-box">
		@if (!totalPublications.Any())
		{
			<p><em>Загрузка...</em></p>
		}
		else
		{
			@if (!publications.Any())
			{
				<h5><em>Тут пока пусто...</em></h5>

			}
			else
			{
				foreach (var publication in publications)
				{
					<div class="article" style="margin:3% 1% 3% 0">
						<div style="display:grid;grid-template-columns:70% 25%; grid-gap:5%">
							<span style="color:#558CB7">
								@(publication.Created.ToTimeIntervalString())
							</span>
						</div>
						<a @onclick="()=>ReadArticle(publication.Id)" class="article-title">
							@publication.Title
						</a>
						<div>
							<span>
								@if (publication.Reactions is not null)
								{
									<span>
										<img src="/images/like_icon.png" />
									</span>
									<span style="color:#55B765">@publication.Reactions.GetLikes().Count()</span>

									<span>
										<img src="/images/dislike_icon.png" />
									</span>
									<span style="color:#CA5454">@publication.Reactions.GetDisLikes().Count()</span>
								}
							</span>
						</div>
						<div class="article-content">
							@publication.XmlDocumentUrl
						</div>
					</div>
				}
			}
			<button class="auth-btn" style="max-width:30%;font-size:medium" @onclick="GoToPublicationCreate">
				Создать публикацию
			</button>
		}
	</div>
</div>


@code {

	Publication[] totalPublications = [];
	Publication[] publications = [];
	public int userId;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (!firstRender) return;

		totalPublications = await publicationService.GetPublications();

		userId = await GetIdFromAccessToken();

		publications = totalPublications.Where(x => x.Issuer is not null && x.Issuer.Id == userId).ToArray();

		StateHasChanged();
	}

	void ReadArticle(int id)
	{
		nav.NavigateTo(Path.Combine("article", id.ToString()));
	}

	void GoToPublicationCreate()
	{
		nav.NavigateTo("publication-create");
	}

	private async Task<int> GetIdFromAccessToken()
	{
		var accessToken = await Cookie.GetValue("access_token");

		if (string.IsNullOrEmpty(accessToken)) return 0;

		var jwt = new JwtSecurityToken(accessToken);

		var strId = jwt.Claims.First(x => x.Type == ClaimsIdentity.DefaultNameClaimType).Value;

		if (int.TryParse(strId, out int value))
			return value;

		return 0;
	}
}