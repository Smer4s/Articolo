@page "/article/{Id:int}"
@using Client.Extensions
@using Client.Models.Comment
@using Client.Models.Publication
@using Client.Services.Abstractions
@inject IPublicationService publicationService
@inject NavigationManager nav
@rendermode @(new InteractiveServerRenderMode(prerender:false))

<PageTitle>@(Publication is not null ? Publication.Title : string.Empty)</PageTitle>

<div class="pages-layout">
	<div class="article-box">
		@if (Publication is null)
		{
			<p><em>Загрузка...</em></p>
		}
		else
		{

			<div class="article">
				<div>
					<span>
						@if (Publication.Issuer is not null)
							@Publication.Issuer.UserName






					</span>
					<span style="color:#558CB7">
						@(Publication.Created.ToTimeIntervalString())
					</span>
				</div>
				<span class="article-title">
					@Publication.Title
				</span>
				<div>
				</div>
				<div class="article-content">
					@Publication.XmlDocumentUrl
				</div>
			</div>
		}
	</div>


	@if (Publication is not null && Publication.Status == "Published")
	{
		<div class="comments-box">
			<div style="font-weight:bold;font-size:large;">
				Комментарии
			</div>
			@if (Comments is not null)
			{
				<div style="box-shadow: 0 2px 4px rgba(0,0,0,0.1); margin: 0.5% 0;">
					@foreach (var comment in Comments)
					{
						<div style="padding: 1% 0%">
							<span class="account-username" style="color:#558CB7; max-width:35%;">
								@comment.IssuerName
								@comment.Posted.ToTimeIntervalString()
							</span>
						</div>
						<div style="padding: 0.5% 0">
							@comment.Text
						</div>
					}
				</div>
			}
			<div style="box-shadow: 0 2px 4px rgba(0,0,0,0.1); margin: 2% 0">
				<div style="font-weight:bold">
					Добавить комментарий:
				</div>
				@if (error)
				{
					<div @onclick="(()=>error = false)" style="color:red;">
						Сообщение не должно быть пустое
					</div>
				}
				@if (unathorized)
				{
					<div>
						<span style="color:red;">
							Комментарии могут оставлять только
						</span>
						<a href="/auth">зарегистрированные</a>
						<span style="color:red;">
							пользователи
						</span>
					</div>
				}
				@if (!unathorized && !error)
				{
					<InputText style="width:100%; border:none;" @bind-Value=commentText />
					<button class="auth-btn" style="max-width:12%;font-size:medium" @onclick="AddComment">
						Добавить
					</button>
				}
			</div>
		</div>
	}
</div>


@code {
	[Parameter]
	public int Id { get; set; }

	Publication? Publication { get; set; }

	IEnumerable<Comment>? Comments;
	bool error = false;
	bool unathorized = false;

	string commentText = "";

	async Task AddComment()
	{
		if (string.IsNullOrEmpty(commentText))
		{
			error = true;
			return;
		}

		var comment = new Comment()
			{
				Posted = DateTime.Now,
				Text = commentText
			};

		try
		{
			await publicationService.AddCommentToPublication(Publication!.Id, comment);
		}
		catch (HttpRequestException e)
		{
			if (e.StatusCode is System.Net.HttpStatusCode.Unauthorized)
				unathorized = true;
			else
				throw e;
		}
		Publication = await publicationService.GetPublication(Id);
		Comments = Publication!.Comments;

		commentText = "";
		StateHasChanged();
	}


	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (!firstRender) return;

		Publication = await publicationService.GetPublication(Id);
		Comments = Publication!.Comments;

		StateHasChanged();
	}
}
