@page "/feed"
@using System.Security.Claims
@using Client.Extensions
@using Client.Models
@using Client.Models.Publication
@using Microsoft.AspNetCore.Components.Authorization
@using Client.Services.Abstractions
@inject IPublicationService publicationService
@inject NavigationManager nav
@rendermode InteractiveServer

<PageTitle>Лента</PageTitle>

<div class="pages-layout">
  <div class="grid-container">
    <div class="feed-filters-box">
      <div class="filters-title">Моя лента</div>
    </div>
    <div class="feed-leaderboard-box">
      <div class="leaderboard-title">Лучшие статьи</div>
      @if (Publications is null)
      {
        <p><em>Загрузка...</em></p>
        <p style="color:red"><em>@connectionLost</em></p>
      }
      else
      {
        int count = 0;
        @foreach (var publication in Publications.OrderBy(x => x.Rating))
        {
          if (count >= 4)
            break;
          count++;
          <div class="leaderboard-content">
            @publication.Title
            <span style="align-self:flex-end">@publication.Rating⭐</span>
          </div>
        }
      }
    </div>
    <div class="article-box">
      @if (Publications is null)
      {
        <p><em>Загрузка...</em></p>
        <h3 style="color:red">@connectionLost</h3>
      }
      else
      {
        foreach (var publication in Publications)
        {
          <div class="article">
            <div>
              <span>
                @if (publication.Issuer is not null)
                  @publication.Issuer.UserName

              </span>
              <span>
                Опубликовано: @(publication.Created.ToTimeIntervalString())
              </span>
              <button @onclick="(()=>AddToFavorites(publication.Id))">
                favourites: @publication.FavouritesCount
              </button>
            </div>
            <span class="article-title">
              @publication.Title
            </span>
            <div>
              <span>
                @if (publication.Reactions is not null)
                {
                  <span>likes:  @publication.Reactions.GetLikes() </span>
                  <span>dislikes: @publication.Reactions.GetDisLikes() </span>
                }
              </span>
              <span>
                @if (publication.Comments is not null)
                {
                  <span>comments: @publication.Comments.Count </span>
                }
              </span>
            </div>
            <div>
              @if (publication.Themes is not null)
                @foreach (var theme in publication.Themes)
                {
                  <span>@theme.Title* </span>
                }
            </div>
            <div class="article-content">
              @publication.XmlDocumentUrl
            </div>
            <label style="color:red">@unathorizedMessage</label>
            <button @onclick="(()=>ReadArticle(publication.Id))">Читать дальше</button>
          </div>
        }
      }
    </div>
  </div>
</div>

@code {
  private Publication[]? Publications;
  private string? unathorizedMessage;
  private string? connectionLost;

  async Task AddToFavorites(int id)
  {
    try
    {
      await publicationService.AddPublicationToFavorites(id);

      Publications!.First(x => x.Id == id).FavouritesCount++;
    }
    catch (HttpRequestException e)
    {
      if (e.StatusCode is System.Net.HttpStatusCode.Unauthorized)
        unathorizedMessage = "Вы не авторизованы";
    }
  }

  void ReadArticle(int id)
  {
    nav.NavigateTo(Path.Combine("article", id.ToString()));
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    try
    {
      Publications = await publicationService.GetPublications();

      if (firstRender)
        StateHasChanged();
    }
    catch (HttpRequestException)
    {
      connectionLost = "Проверьте подключение к интернету";
    }
    await base.OnAfterRenderAsync(firstRender);
  }
}
