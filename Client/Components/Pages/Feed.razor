@page "/feed"
@using System.Security.Claims
@using Client.Extensions
@using Client.Models
@using Client.Models.Publication
@using Microsoft.AspNetCore.Components.Authorization
@using Client.Services.Abstractions
@inject IPublicationService publicationService
@inject NavigationManager nav
@attribute [StreamRendering]
@rendermode RenderMode.InteractiveServer

<PageTitle>Лента</PageTitle>

<div class="pages-layout">
  <div class="grid-container">
    <div class="feed-filters-box">
      <div class="filters-title">Моя лента</div>
    </div>
    <div class="feed-leaderboard-box">
      <div class="leaderboard-title">Лучшие статьи</div>
      @if (Publications is null)
      {
        <p><em>Загрузка...</em></p>
        <p style="color:red"><em>@connectionLost</em></p>
      }
      else
      {
        int count = 0;
        @foreach (var publication in Publications.OrderBy(x => x.Rating))
        {
          if (count >= 4)
            break;
          count++;
          <div class="leaderboard-content">
            @publication.Title
            <span style="align-self:flex-end">@publication.Rating⭐</span>
          </div>
        }
      }
    </div>
    <div class="article-box">
      @if (Publications is null)
      {
        <p><em>Загрузка...</em></p>
        <h3 style="color:red">@connectionLost</h3>
      }
      else
      {
        foreach (var publication in Publications)
        {
          <div class="article">
            <div>
              <span>
                @if (publication.Issuer is not null)
                  @publication.Issuer.UserName
              </span>
              <span>
                Опубликовано: @(publication.Created.ToTimeIntervalString())
              </span>
              <button @onclick="(()=>AddToFavorites(publication.Id))">
                favourites: @publication.FavouritesCount
              </button>
            </div>
            <span class="article-title">
              @publication.Title
            </span>
            <div>
              <span>
                @if (publication.Reactions is not null)
                {
                  <span>likes:  @publication.Reactions.GetLikes() </span>
                  <span>dislikes: @publication.Reactions.GetDisLikes() </span>
                }
              </span>
              <span>
                @if (publication.Comments is not null)
                {
                  <span>comments: @publication.Comments.Count </span>
                }
              </span>
            </div>
            <div>
              @if (publication.Themes is not null)
                @foreach (var theme in publication.Themes)
                {
                  <span>@theme.Title* </span>
                }
            </div>
            <div class="article-content">
              @publication.XmlDocumentUrl
            </div>
            <label style="color:red">@unathorizedMessage</label>
            <button @onclick="(()=>ReadArticle(publication.Id))">Читать дальше</button>
          </div>
        }
      }
    </div>
  </div>
</div>

@code {
  private Publication[]? Publications;
  private string? unathorizedMessage;
  private string? connectionLost;

  async Task AddToFavorites(int id)
  {
    try
    {
      await publicationService.AddPublicationToFavorites(id);

      Publications!.First(x => x.Id == id).FavouritesCount++;
    }
    catch (HttpRequestException e)
    {
      if (e.StatusCode is System.Net.HttpStatusCode.Unauthorized)
        unathorizedMessage = "Вы не авторизованы";
    }
  }

  void ReadArticle(int id)
  {
    nav.NavigateTo(Path.Combine("article", id.ToString()));
  }

  protected override async Task OnInitializedAsync()
  {
    try
    {
      Publications = await publicationService.GetPublications();
    }
    catch (HttpRequestException)
    {
      connectionLost = "Проверьте подключение к интернету";
    }

    // await Task.Delay(500);
    // Publications = [
    //   new Publication()
    //     {
    //       Id = 1,
    //       Issuer = new Models.User()
    //       {
    //         UserName = "Username 1"
    //       },
    //       FavouritesCount = 10,
    //       Comments = new Models.Comment.Comment[5],
    //       Reactions = [
    //                             new PublicationReaction()
    //                             {
    //                               Id = 1,
    //                               ReactionType = Models.Enums.ReactionType.Like
    //                             },
    //         new PublicationReaction()
    //         {
    //           Id = 2,
    //           ReactionType = Models.Enums.ReactionType.Dislike
    //         },
    //         new PublicationReaction()
    //         {
    //           Id = 3,
    //           ReactionType = Models.Enums.ReactionType.Like
    //         },
    //         new PublicationReaction()
    //         {
    //           Id = 4,
    //           ReactionType = Models.Enums.ReactionType.Like
    //         }],
    //       Themes = [new Theme() { Title = "theme 1" }, new Theme() { Title = "theme 2" }],
    //       Rating = 3.4f,
    //       Title = "Title 1awkdjkajwdkj",
    //       XmlDocumentUrl = "XmlDocumentUrl",
    //       Created = DateTime.Parse("11.04.2024 21:23")
    //     },
    //   new Publication()
    //     {
    //       Id = 2,
    //       Issuer = new Models.User()
    //       {
    //         UserName = "Username 2"
    //       },
    //       FavouritesCount = 24,
    //       Rating = 4.5f,
    //       Title = "Titleawdkjhawjkdjaw 2",
    //       XmlDocumentUrl = "XmlDocumentUrl 3",
    //       Created = DateTime.Parse("10.04.2024 19:00")
    //     },
    //   new Publication()
    //     {
    //       Id = 3,
    //       Issuer = new Models.User()
    //       {
    //         UserName = "Username 3"
    //       },
    //       FavouritesCount = 125,
    //       Rating = 5f,
    //       Title = "Title 3aidi92j1kdl21",
    //       XmlDocumentUrl = "XmlDocumentUrl 4",
    //       Created = DateTime.Parse("11.04.2023 19:00")
    //     },
    //   new Publication()
    //     {
    //       Id = 4,
    //       Issuer = new Models.User()
    //       {
    //         UserName = "Username 4"
    //       },
    //       FavouritesCount = 165,
    //       Rating = 4.2f,
    //       Title = "Title2adijio2jdkla2jd2jlk 4",
    //       XmlDocumentUrl = "XmlDocumentUrl 5",
    //       Created = DateTime.Parse("12.04.2024 15:56")
    //     },
    //   new Publication()
    //     {
    //       Id = 5,
    //       Issuer = new Models.User()
    //       {
    //         UserName = "Username 5"
    //       },
    //       FavouritesCount = 1625,
    //       Rating = 4.67f,
    //       Title = "Title2adijioawd12d2jdkla2jd2jlk 6",
    //       XmlDocumentUrl = "XmlDocumentUrl 55125",
    //       Created = DateTime.Parse("11.04.2024 21:52")
    //     }];
  }
}
