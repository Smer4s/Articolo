@page "/feed"
@using System.Security.Claims
@using Client.Extensions
@using Client.Models.Publication
@using Microsoft.AspNetCore.Components.Authorization
@using Client.Services.Abstractions
@inject IPublicationService publicationService
@attribute [StreamRendering]

<PageTitle>Лента</PageTitle>

<div class="pages-layout">
  <div class="grid-container">
    <div class="feed-filters-box">
      <div class="filters-title">Моя лента</div>
    </div>
    <div class="feed-leaderboard-box">
      <div class="leaderboard-title">Лучшие статьи</div>
      @if (Publications is null)
      {
        <p><em>Загрузка...</em></p>
        <p style="color:red"><em>@connectionLost</em></p>
      }
      else
      {
        int count = 0;
        @foreach (var publication in Publications.OrderBy(x => x.Rating))
        {
          if (count >= 4)
            break;
          count++;
          <div class="leaderboard-content">
            @publication.Title
            <span style="align-self:flex-end">@publication.Rating⭐</span>
          </div>
        }
      }
    </div>
    <div class="article-box">
      @if (Publications is null)
      {
        <p><em>Загрузка...</em></p>
        <h3 style="color:red">@connectionLost</h3>
      }
      else
      {
        foreach (var publication in Publications)
        {
          <div class="article">
            <span class="article-title">
              @publication.Title
            </span>
            <span class="article-content">
              @publication.Content
            </span>
            <span>
              Опубликовано: @(publication.Created.ToTimeIntervalString()) 
            </span>
            <p>
              favourites: @publication.FavouritesCount
            </p>
            <button @onclick="(() => AddToFavorites(publication.Id))">
              Добавить в закладки
            </button>
            <label style="color:red">@unathorizedMessage</label>
          </div>
        }
      }
    </div>
  </div>
</div>

@code {
  private Publication[]? Publications;
  private string? unathorizedMessage;
  private string? connectionLost;

  async Task AddToFavorites(int id)
  {
    try
    {
      await publicationService.AddPublicationToFavorites(id);

      Publications!.First(x => x.Id == id).FavouritesCount++;
    }
    catch (HttpRequestException e)
    {
      if (e.StatusCode is System.Net.HttpStatusCode.Unauthorized)
        unathorizedMessage = "Вы не авторизованы";
    }
  }

  protected override async Task OnInitializedAsync()
  {
    // try
    // {
    //   Publications = await publicationService.GetPublications();
    // }
    // catch (HttpRequestException)
    // {
    //   connectionLost = "Проверьте подключение к интернету";
    // }

    await Task.Delay(500);
    Publications = [
      new Publication()
        {
          Id = 1,
          FavouritesCount = 10,
          Rating = 3.4f,
          Title = "Title 1awkdjkajwdkj",
          Content = "Content",
          Created = DateTime.Parse("11.04.2024 21:23")
        },
      new Publication()
        {
          Id = 2,
          FavouritesCount = 24,
          Rating = 4.5f,
          Title = "Titleawdkjhawjkdjaw 2",
          Content = "Content 3",
          Created = DateTime.Parse("10.04.2024 19:00")
        },
      new Publication()
        {
          Id = 3,
          FavouritesCount = 125,
          Rating = 5f,
          Title = "Title 3aidi92j1kdl21",
          Content = "Content 4",
          Created = DateTime.Parse("11.04.2023 19:00")
        },
      new Publication()
        {
          Id = 4,
          FavouritesCount = 165,
          Rating = 4.2f,
          Title = "Title2adijio2jdkla2jd2jlk 4",
          Content = "Content 5",
          Created = DateTime.Parse("12.04.2024 15:56")
        },
      new Publication()
        {
          Id = 5,
          FavouritesCount = 1625,
          Rating = 4.67f,
          Title = "Title2adijioawd12d2jdkla2jd2jlk 6",
          Content = "Content 55125",
          Created = DateTime.Parse("11.04.2024 21:52")
        }];
  }
}
