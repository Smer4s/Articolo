@using Client.Models
@using Client.Services.Abstractions
@rendermode InteractiveServer

<button class="account" @onclick="ToggleMenu">
  @if (User is null)
  {
    <a class="account-username" href="/auth">Войти</a>
  }
  else
  {
    <span class="account-username">@(User.UserName ?? User.Login)</span>
    <img src="https://i.ytimg.com/vi/8V6qj4Xkrsc/hqdefault.jpg?sqp=-oaymwEbCKgBEF5IVfKriqkDDggBFQAAiEIYAXABwAEG&rs=AOn4CLCMrn97AJNjaj9BKvAIx71FvUbBrg" style="border-radius:50%; width:100%; height:100%" />
    @if (showMenu)
    {
      <div class="account-menu">
        <button @onclick="GoToPublications">Публикации</button>
        <button @onclick="GoToFavorites">Закладки</button>
        <button @onclick="Logout">Выйти</button>
      </div>
    }
  }
</button>

@code{
	[Inject]
	public required ICookie CookieService { get; set; }

	[Inject]
	public required IUserService UserService { get; set; }

	[Inject]
	public required NavigationManager NavigationManager { get; set; }

	public User? User { get; private set; }
	private bool showMenu = false;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		try
		{
			User = await UserService.GetUser();
			if(firstRender)
				StateHasChanged();
		}
		catch (HttpRequestException e)
		{
			if (e.StatusCode is not System.Net.HttpStatusCode.Unauthorized) throw;
		}
		await base.OnAfterRenderAsync(firstRender);
	}

	public void ToggleMenu()
	{
		showMenu = !showMenu;
		StateHasChanged();
	}

	private void GoToPublications()
	{
		NavigationManager.NavigateTo(Path.Combine(User!.Id.ToString(),"publications"));
	}

	private void GoToFavorites()
	{
		NavigationManager.NavigateTo(Path.Combine(User!.Id.ToString(), "favs"));
	}

	private async Task Logout()
	{
		await UserService.Logout();
		await CookieService.DeleteCookie("access_token");
		await CookieService.DeleteCookie("refresh_token");
		User = null;
		
		StateHasChanged();
	}
}